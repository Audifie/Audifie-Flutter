// Mocks generated by Mockito 5.0.15 from annotations
// in audifie_version_1/test/features/authentication/domain/usecases/sign_up_usecase_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:audifie_version_1/core/errors/failure.dart' as _i5;
import 'package:audifie_version_1/core/errors/success.dart' as _i6;
import 'package:audifie_version_1/core/services/validator_service.dart' as _i10;
import 'package:audifie_version_1/features/authentication/domain/entities/forgot_password_info.dart'
    as _i9;
import 'package:audifie_version_1/features/authentication/domain/entities/sign_in_info.dart'
    as _i8;
import 'package:audifie_version_1/features/authentication/domain/entities/sign_up_info.dart'
    as _i7;
import 'package:audifie_version_1/features/authentication/domain/repositories/auth_repo.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [AuthRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepo extends _i1.Mock implements _i3.AuthRepo {
  MockAuthRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Success>> sendOtpForSignUp(
          _i7.SignUpInfo? signUpInfo) =>
      (super.noSuchMethod(Invocation.method(#sendOtpForSignUp, [signUpInfo]),
              returnValue: Future<_i2.Either<_i5.Failure, _i6.Success>>.value(
                  _FakeEither_0<_i5.Failure, _i6.Success>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Success>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Success>> verifyOtpAndSignUp(
          String? email, String? otp) =>
      (super.noSuchMethod(Invocation.method(#verifyOtpAndSignUp, [email, otp]),
              returnValue: Future<_i2.Either<_i5.Failure, _i6.Success>>.value(
                  _FakeEither_0<_i5.Failure, _i6.Success>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Success>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Success>> googleSignUp() =>
      (super.noSuchMethod(Invocation.method(#googleSignUp, []),
              returnValue: Future<_i2.Either<_i5.Failure, _i6.Success>>.value(
                  _FakeEither_0<_i5.Failure, _i6.Success>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Success>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Success>> facebookSignUp() =>
      (super.noSuchMethod(Invocation.method(#facebookSignUp, []),
              returnValue: Future<_i2.Either<_i5.Failure, _i6.Success>>.value(
                  _FakeEither_0<_i5.Failure, _i6.Success>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Success>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Success>> signIn(
          _i8.SignInInfo? signInInfo) =>
      (super.noSuchMethod(Invocation.method(#signIn, [signInInfo]),
              returnValue: Future<_i2.Either<_i5.Failure, _i6.Success>>.value(
                  _FakeEither_0<_i5.Failure, _i6.Success>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Success>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Success>> googleSignIn() =>
      (super.noSuchMethod(Invocation.method(#googleSignIn, []),
              returnValue: Future<_i2.Either<_i5.Failure, _i6.Success>>.value(
                  _FakeEither_0<_i5.Failure, _i6.Success>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Success>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Success>> facebookSignIn() =>
      (super.noSuchMethod(Invocation.method(#facebookSignIn, []),
              returnValue: Future<_i2.Either<_i5.Failure, _i6.Success>>.value(
                  _FakeEither_0<_i5.Failure, _i6.Success>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Success>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Success>> forgotPassword(
          _i9.ForgotPasswordInfo? forgotPasswordInfo) =>
      (super.noSuchMethod(
              Invocation.method(#forgotPassword, [forgotPasswordInfo]),
              returnValue: Future<_i2.Either<_i5.Failure, _i6.Success>>.value(
                  _FakeEither_0<_i5.Failure, _i6.Success>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Success>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ValidatorService].
///
/// See the documentation for Mockito's code generation for more information.
class MockValidatorService extends _i1.Mock implements _i10.ValidatorService {
  MockValidatorService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool isEmail(String? email) =>
      (super.noSuchMethod(Invocation.method(#isEmail, [email]),
          returnValue: false) as bool);
  @override
  bool isPassword(String? password) =>
      (super.noSuchMethod(Invocation.method(#isPassword, [password]),
          returnValue: false) as bool);
  @override
  String toString() => super.toString();
}
