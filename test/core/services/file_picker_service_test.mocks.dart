// Mocks generated by Mockito 5.0.15 from annotations
// in audifie_version_1/test/core/services/file_picker_service_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:file_picker/src/file_picker.dart' as _i2;
import 'package:file_picker/src/file_picker_result.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

/// A class which mocks [FilePicker].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilePicker extends _i1.Mock implements _i2.FilePicker {
  MockFilePicker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.FilePickerResult?> pickFiles(
          {String? dialogTitle,
          _i2.FileType? type = _i2.FileType.any,
          List<String>? allowedExtensions,
          dynamic Function(_i2.FilePickerStatus)? onFileLoading,
          bool? allowCompression = true,
          bool? allowMultiple = false,
          bool? withData = false,
          bool? withReadStream = false}) =>
      (super.noSuchMethod(
              Invocation.method(#pickFiles, [], {
                #dialogTitle: dialogTitle,
                #type: type,
                #allowedExtensions: allowedExtensions,
                #onFileLoading: onFileLoading,
                #allowCompression: allowCompression,
                #allowMultiple: allowMultiple,
                #withData: withData,
                #withReadStream: withReadStream
              }),
              returnValue: Future<_i4.FilePickerResult?>.value())
          as _i3.Future<_i4.FilePickerResult?>);
  @override
  _i3.Future<bool?> clearTemporaryFiles() =>
      (super.noSuchMethod(Invocation.method(#clearTemporaryFiles, []),
          returnValue: Future<bool?>.value()) as _i3.Future<bool?>);
  @override
  _i3.Future<String?> getDirectoryPath({String? dialogTitle}) =>
      (super.noSuchMethod(
          Invocation.method(#getDirectoryPath, [], {#dialogTitle: dialogTitle}),
          returnValue: Future<String?>.value()) as _i3.Future<String?>);
  @override
  String toString() => super.toString();
}
